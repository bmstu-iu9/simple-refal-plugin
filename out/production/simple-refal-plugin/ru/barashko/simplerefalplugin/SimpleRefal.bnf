{
  parserClass="ru.barashko.simplerefalplugin.parser.SimpleRefalParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="SimpleRefal"
  psiImplClassSuffix="Impl"
  psiPackage="ru.barashko.simplerefalplugin.psi"
  psiImplPackage="ru.barashko.simplerefalplugin.psi.impl"

  elementTypeHolderClass="ru.barashko.simplerefalplugin.psi.SimpleRefalTypes"
  elementTypeClass="ru.barashko.simplerefalplugin.psi.SimpleRefalElementType"
  tokenTypeClass="ru.barashko.simplerefalplugin.psi.SimpleRefalTokenType"
}

program ::= programElement*
programElement ::= externalDeclaration
                | enumDefinition
                | swapDefinition
                | functionDefinition
                | forwardDecration
                | identifierDefinition
                | SEMICOLON
comment ::= CPP_INLINE
            | MULTILINE_COMMENT
            | END_OF_LINE_COMMENT
externalDeclaration ::= EXTERN nameList {pin=1}
enumDefinition ::= (ENUM | EENUM) nameList {pin=1}
swapDefinition ::= (SWAP | ESWAP) nameList {pin=1}
functionDefinition ::= ENTRY? functionName block {pin=2}
block ::= LBRACE sentence* RBRACE {pin=1}
sentence ::= pattern EQUAL result SEMICOLON {pin=2}
pattern ::= patternTerm*
result ::= resultTerm*
patternTerm ::= redefinitionVariable
                | commonTerm
                | LPAREN pattern RPAREN
                | LBRACKET NAME pattern RPAREN
resultTerm ::= commonTerm
                | parenResultTerm
                | bracketResultTerm
                | chevronResultTerm
                | block
private parenResultTerm ::= LPAREN result RPAREN {pin=1}
private chevronResultTerm ::= LCHEVRON result RCHEVRON {pin=1}
private bracketResultTerm ::= LBRACKET functionName result RBRACKET {pin=1}
commonTerm ::= var
                | functionName
                | identifier
                | QUOTEDSTRING
                | INTEGER_LITERAL
identifier ::= SHARP NAME
redefinitionVariable ::= var CARET
functionName ::= NAME
var ::= VARIABLE
forwardDecration ::= FORWARD nameList
identifierDefinition ::= LABEL nameList
nameList ::= NAME (COMMA NAME)* SEMICOLON
